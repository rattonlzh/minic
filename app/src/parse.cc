// Generated by Bisonc++ V6.01.00 on Fri, 24 Apr 2020 23:31:52 +0800

// base/comment

// $insert class.ih
#include "Parser.ih"

// The FIRST element of SR arrays shown below uses `d_type', defining the
// state's type, and `d_lastIdx' containing the last element's index. If
// d_lastIdx contains the REQ_TOKEN bitflag (see below) then the state needs
// a token: if in this state d_token is Reserved__::UNDETERMINED__, nextToken() will be
// called

// The LAST element of SR arrays uses `d_token' containing the last retrieved
// token to speed up the (linear) seach.  Except for the first element of SR
// arrays, the field `d_action' is used to determine what to do next. If
// positive, it represents the next state (used with SHIFT); if zero, it
// indicates `ACCEPT', if negative, -d_action represents the number of the
// rule to reduce to.

// `lookup()' tries to find d_token in the current SR array. If it fails, and
// there is no default reduction UNEXPECTED_TOKEN__ is thrown, which is then
// caught by the error-recovery function.

// The error-recovery function will pop elements off the stack until a state
// having bit flag ERR_ITEM is found. This state has a transition on errTok__
// which is applied. In this errTok__ state, while the current token is not a
// proper continuation, new tokens are obtained by nextToken(). If such a
// token is found, error recovery is successful and the token is
// handled according to the error state's SR table and parsing continues.
// During error recovery semantic actions are ignored.

// A state flagged with the DEF_RED flag will perform a default
// reduction if no other continuations are available for the current token.

// The ACCEPT STATE never shows a default reduction: when it is reached the
// parser returns ACCEPT(). During the grammar
// analysis phase a default reduction may have been defined, but it is
// removed during the state-definition phase.

// So:
//      s_x[] = 
//      {
//                  [_field_1_]         [_field_2_]
//
// First element:   {state-type,        idx of last element},
// Other elements:  {required token,    action to perform},
//                                      ( < 0: reduce, 
//                                          0: ACCEPT,
//                                        > 0: next state)
//      }

// base/declarations

namespace // anonymous
{
    char const author[] = "Frank B. Brokken (f.b.brokken@rug.nl)";

    enum Reserved__
    {
        UNDETERMINED__   = -2,
        EOF__            = -1,
        errTok__         = 256
    };
    enum StateType       // modify statetype/data.cc when this enum changes
    {
        NORMAL,
        ERR_ITEM,
        REQ_TOKEN,
        ERR_REQ,    // ERR_ITEM | REQ_TOKEN
        DEF_RED,    // state having default reduction
        ERR_DEF,    // ERR_ITEM | DEF_RED
        REQ_DEF,    // REQ_TOKEN | DEF_RED
        ERR_REQ_DEF // ERR_ITEM | REQ_TOKEN | DEF_RED
    };    
    enum StateTransition
    {
        ACCEPT__   = 0,     // `ACCEPT' TRANSITION
    };

    struct PI__     // Production Info
    {
        size_t d_nonTerm; // identification number of this production's
                            // non-terminal 
        size_t d_size;    // number of elements in this production 
    };

    struct SR__     // Shift Reduce info, see its description above
    {
        union
        {
            int _field_1_;      // initializer, allowing initializations 
                                // of the SR s_[] arrays
            StateType d_type;
            int       d_token;
        };
        union
        {
            int _field_2_;

            int d_lastIdx;          // if negative, the state uses SHIFT
            int d_action;           // may be negative (reduce), 
                                    // postive (shift), or 0 (accept)
        };
    };

    // $insert staticdata
    
    enum                        // size to expand the state-stack with when
    {                           // full
        STACK_EXPANSION__ = 10
    };

// Productions Info Records:
PI__ const s_productionInfo[] = 
{
     {0, 0}, // not used: reduction values are negative
     {284, 1}, // 1: program ->  declaration_list
     {285, 2}, // 2: declaration_list ->  declaration_list declaration
     {285, 1}, // 3: declaration_list ->  declaration
     {286, 1}, // 4: declaration ->  var_declaration
     {286, 1}, // 5: declaration ->  fun_declaration
     {287, 3}, // 6: var_declaration (SEMICOLON) ->  type_specifier id SEMICOLON
     {287, 6}, // 7: var_declaration (LEFTS) ->  type_specifier id LEFTS num RIGHTS SEMICOLON
     {289, 1}, // 8: type_specifier (INT) ->  INT
     {289, 1}, // 9: type_specifier (VOID) ->  VOID
     {288, 6}, // 10: fun_declaration (LEFTP) ->  type_specifier id LEFTP params RIGHTP compound_stmt
     {292, 1}, // 11: params ->  param_list
     {292, 1}, // 12: params (VOID) ->  VOID
     {294, 3}, // 13: param_list (COMMA) ->  param_list COMMA param
     {294, 1}, // 14: param_list ->  param
     {295, 2}, // 15: param ->  type_specifier id
     {295, 4}, // 16: param (LEFTS) ->  type_specifier id LEFTS RIGHTS
     {293, 4}, // 17: compound_stmt (LEFTB) ->  LEFTB local_declarations statement_list RIGHTB
     {296, 2}, // 18: local_declarations ->  local_declarations var_declaration
     {296, 1}, // 19: local_declarations ->  empty
     {297, 2}, // 20: statement_list ->  statement_list statement
     {297, 1}, // 21: statement_list ->  empty
     {299, 1}, // 22: statement ->  expression_stmt
     {299, 1}, // 23: statement ->  compound_stmt
     {299, 1}, // 24: statement ->  selection_stmt
     {299, 1}, // 25: statement ->  iteration_stmt
     {299, 1}, // 26: statement ->  return_stmt
     {300, 2}, // 27: expression_stmt (SEMICOLON) ->  expression SEMICOLON
     {300, 1}, // 28: expression_stmt (SEMICOLON) ->  SEMICOLON
     {301, 5}, // 29: selection_stmt (IF) ->  IF LEFTP expression RIGHTP statement
     {301, 7}, // 30: selection_stmt (IF) ->  IF LEFTP expression RIGHTP statement ELSE statement
     {302, 5}, // 31: iteration_stmt (WHILE) ->  WHILE LEFTP expression RIGHTP statement
     {303, 2}, // 32: return_stmt (RETURN) ->  RETURN SEMICOLON
     {303, 3}, // 33: return_stmt (RETURN) ->  RETURN expression SEMICOLON
     {304, 3}, // 34: expression (ASSIGN) ->  var ASSIGN expression
     {304, 1}, // 35: expression ->  simple_expression
     {305, 1}, // 36: var ->  id
     {305, 4}, // 37: var (LEFTS) ->  id LEFTS expression RIGHTS
     {306, 3}, // 38: simple_expression ->  additive_expression relop additive_expression
     {306, 1}, // 39: simple_expression ->  additive_expression
     {308, 1}, // 40: relop (LE) ->  LE
     {308, 1}, // 41: relop (LT) ->  LT
     {308, 1}, // 42: relop (GT) ->  GT
     {308, 1}, // 43: relop (GE) ->  GE
     {308, 1}, // 44: relop (EQ) ->  EQ
     {308, 1}, // 45: relop (NE) ->  NE
     {307, 3}, // 46: additive_expression ->  additive_expression addop term
     {307, 1}, // 47: additive_expression ->  term
     {309, 1}, // 48: addop (ADD) ->  ADD
     {309, 1}, // 49: addop (SUB) ->  SUB
     {310, 3}, // 50: term ->  term mulop factor
     {310, 1}, // 51: term ->  factor
     {311, 1}, // 52: mulop (MUL) ->  MUL
     {311, 1}, // 53: mulop (DIV) ->  DIV
     {312, 3}, // 54: factor (LEFTP) ->  LEFTP expression RIGHTP
     {312, 1}, // 55: factor ->  var
     {312, 1}, // 56: factor ->  call
     {312, 1}, // 57: factor ->  num
     {313, 4}, // 58: call (LEFTP) ->  id LEFTP args RIGHTP
     {314, 1}, // 59: args ->  arg_list
     {314, 0}, // 60: args ->  <empty>
     {315, 3}, // 61: arg_list (COMMA) ->  arg_list COMMA expression
     {315, 1}, // 62: arg_list ->  expression
     {290, 1}, // 63: id (ID) ->  ID
     {291, 1}, // 64: num (NUM) ->  NUM
     {298, 0}, // 65: empty ->  <empty>
     {316, 1}, // 66: program_$ ->  program
};

// State info and SR__ transitions for each state.


SR__ s_0[] =
{
    { { REQ_TOKEN}, { 9} },                    
    { {       284}, { 1} }, // program         
    { {       285}, { 2} }, // declaration_list
    { {       286}, { 3} }, // declaration     
    { {       287}, { 4} }, // var_declaration 
    { {       288}, { 5} }, // fun_declaration 
    { {       289}, { 6} }, // type_specifier  
    { {       260}, { 7} }, // INT             
    { {       261}, { 8} }, // VOID            
    { {         0}, { 0} },                    
};

SR__ s_1[] =
{
    { { REQ_TOKEN}, {        2} }, 
    { {     EOF__}, { ACCEPT__} }, 
    { {         0}, {        0} }, 
};

SR__ s_2[] =
{
    { { REQ_DEF}, {  7} },                   
    { {     286}, {  9} }, // declaration    
    { {     287}, {  4} }, // var_declaration
    { {     288}, {  5} }, // fun_declaration
    { {     289}, {  6} }, // type_specifier 
    { {     260}, {  7} }, // INT            
    { {     261}, {  8} }, // VOID           
    { {       0}, { -1} },                   
};

SR__ s_3[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -3} }, 
};

SR__ s_4[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -4} }, 
};

SR__ s_5[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -5} }, 
};

SR__ s_6[] =
{
    { { REQ_TOKEN}, {  3} },      
    { {       290}, { 10} }, // id
    { {       263}, { 11} }, // ID
    { {         0}, {  0} },      
};

SR__ s_7[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -8} }, 
};

SR__ s_8[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -9} }, 
};

SR__ s_9[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -2} }, 
};

SR__ s_10[] =
{
    { { REQ_TOKEN}, {  4} },             
    { {       272}, { 12} }, // SEMICOLON
    { {       267}, { 13} }, // LEFTS    
    { {       265}, { 14} }, // LEFTP    
    { {         0}, {  0} },             
};

SR__ s_11[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -63} }, 
};

SR__ s_12[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -6} }, 
};

SR__ s_13[] =
{
    { { REQ_TOKEN}, {  3} },       
    { {       291}, { 15} }, // num
    { {       264}, { 16} }, // NUM
    { {         0}, {  0} },       
};

SR__ s_14[] =
{
    { { REQ_TOKEN}, {  7} },                  
    { {       292}, { 17} }, // params        
    { {       294}, { 18} }, // param_list    
    { {       261}, { 19} }, // VOID          
    { {       295}, { 20} }, // param         
    { {       289}, { 21} }, // type_specifier
    { {       260}, {  7} }, // INT           
    { {         0}, {  0} },                  
};

SR__ s_15[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       268}, { 22} }, // RIGHTS
    { {         0}, {  0} },          
};

SR__ s_16[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -64} }, 
};

SR__ s_17[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       266}, { 23} }, // RIGHTP
    { {         0}, {  0} },          
};

SR__ s_18[] =
{
    { { REQ_DEF}, {   2} },         
    { {     271}, {  24} }, // COMMA
    { {       0}, { -11} },         
};

SR__ s_19[] =
{
    { { REQ_DEF}, {   2} },          
    { {     266}, { -12} }, // RIGHTP
    { {       0}, {  -9} },          
};

SR__ s_20[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -14} }, 
};

SR__ s_21[] =
{
    { { REQ_TOKEN}, {  3} },      
    { {       290}, { 25} }, // id
    { {       263}, { 11} }, // ID
    { {         0}, {  0} },      
};

SR__ s_22[] =
{
    { { REQ_TOKEN}, {  2} },             
    { {       272}, { 26} }, // SEMICOLON
    { {         0}, {  0} },             
};

SR__ s_23[] =
{
    { { REQ_TOKEN}, {  3} },                 
    { {       293}, { 27} }, // compound_stmt
    { {       269}, { 28} }, // LEFTB        
    { {         0}, {  0} },                 
};

SR__ s_24[] =
{
    { { REQ_TOKEN}, {  5} },                  
    { {       295}, { 29} }, // param         
    { {       289}, { 21} }, // type_specifier
    { {       260}, {  7} }, // INT           
    { {       261}, {  8} }, // VOID          
    { {         0}, {  0} },                  
};

SR__ s_25[] =
{
    { { REQ_DEF}, {   2} },         
    { {     267}, {  30} }, // LEFTS
    { {       0}, { -15} },         
};

SR__ s_26[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -7} }, 
};

SR__ s_27[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -10} }, 
};

SR__ s_28[] =
{
    { { DEF_RED}, {   3} },                      
    { {     296}, {  31} }, // local_declarations
    { {     298}, {  32} }, // empty             
    { {       0}, { -65} },                      
};

SR__ s_29[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -13} }, 
};

SR__ s_30[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       268}, { 33} }, // RIGHTS
    { {         0}, {  0} },          
};

SR__ s_31[] =
{
    { { REQ_DEF}, {   7} },                   
    { {     297}, {  34} }, // statement_list 
    { {     287}, {  35} }, // var_declaration
    { {     298}, {  36} }, // empty          
    { {     289}, {  37} }, // type_specifier 
    { {     260}, {   7} }, // INT            
    { {     261}, {   8} }, // VOID           
    { {       0}, { -65} },                   
};

SR__ s_32[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -19} }, 
};

SR__ s_33[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -16} }, 
};

SR__ s_34[] =
{
    { { REQ_TOKEN}, { 25} },                       
    { {       270}, { 38} }, // RIGHTB             
    { {       299}, { 39} }, // statement          
    { {       300}, { 40} }, // expression_stmt    
    { {       293}, { 41} }, // compound_stmt      
    { {       301}, { 42} }, // selection_stmt     
    { {       302}, { 43} }, // iteration_stmt     
    { {       303}, { 44} }, // return_stmt        
    { {       304}, { 45} }, // expression         
    { {       272}, { 46} }, // SEMICOLON          
    { {       269}, { 28} }, // LEFTB              
    { {       258}, { 47} }, // IF                 
    { {       262}, { 48} }, // WHILE              
    { {       259}, { 49} }, // RETURN             
    { {       305}, { 50} }, // var                
    { {       306}, { 51} }, // simple_expression  
    { {       290}, { 52} }, // id                 
    { {       307}, { 53} }, // additive_expression
    { {       263}, { 11} }, // ID                 
    { {       310}, { 54} }, // term               
    { {       312}, { 55} }, // factor             
    { {       265}, { 56} }, // LEFTP              
    { {       313}, { 57} }, // call               
    { {       291}, { 58} }, // num                
    { {       264}, { 16} }, // NUM                
    { {         0}, {  0} },                       
};

SR__ s_35[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -18} }, 
};

SR__ s_36[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -21} }, 
};

SR__ s_37[] =
{
    { { REQ_TOKEN}, {  3} },      
    { {       290}, { 59} }, // id
    { {       263}, { 11} }, // ID
    { {         0}, {  0} },      
};

SR__ s_38[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -17} }, 
};

SR__ s_39[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -20} }, 
};

SR__ s_40[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -22} }, 
};

SR__ s_41[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -23} }, 
};

SR__ s_42[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -24} }, 
};

SR__ s_43[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -25} }, 
};

SR__ s_44[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -26} }, 
};

SR__ s_45[] =
{
    { { REQ_TOKEN}, {  2} },             
    { {       272}, { 60} }, // SEMICOLON
    { {         0}, {  0} },             
};

SR__ s_46[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -28} }, 
};

SR__ s_47[] =
{
    { { REQ_TOKEN}, {  2} },         
    { {       265}, { 61} }, // LEFTP
    { {         0}, {  0} },         
};

SR__ s_48[] =
{
    { { REQ_TOKEN}, {  2} },         
    { {       265}, { 62} }, // LEFTP
    { {         0}, {  0} },         
};

SR__ s_49[] =
{
    { { REQ_TOKEN}, { 14} },                       
    { {       272}, { 63} }, // SEMICOLON          
    { {       304}, { 64} }, // expression         
    { {       305}, { 50} }, // var                
    { {       306}, { 51} }, // simple_expression  
    { {       290}, { 52} }, // id                 
    { {       307}, { 53} }, // additive_expression
    { {       263}, { 11} }, // ID                 
    { {       310}, { 54} }, // term               
    { {       312}, { 55} }, // factor             
    { {       265}, { 56} }, // LEFTP              
    { {       313}, { 57} }, // call               
    { {       291}, { 58} }, // num                
    { {       264}, { 16} }, // NUM                
    { {         0}, {  0} },                       
};

SR__ s_50[] =
{
    { { REQ_DEF}, {   2} },          
    { {     277}, {  65} }, // ASSIGN
    { {       0}, { -55} },          
};

SR__ s_51[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -35} }, 
};

SR__ s_52[] =
{
    { { REQ_DEF}, {   3} },         
    { {     267}, {  66} }, // LEFTS
    { {     265}, {  67} }, // LEFTP
    { {       0}, { -36} },         
};

SR__ s_53[] =
{
    { { REQ_DEF}, {  11} },         
    { {     308}, {  68} }, // relop
    { {     309}, {  69} }, // addop
    { {     279}, {  70} }, // LE   
    { {     278}, {  71} }, // LT   
    { {     280}, {  72} }, // GT   
    { {     281}, {  73} }, // GE   
    { {     282}, {  74} }, // EQ   
    { {     283}, {  75} }, // NE   
    { {     273}, {  76} }, // ADD  
    { {     274}, {  77} }, // SUB  
    { {       0}, { -39} },         
};

SR__ s_54[] =
{
    { { REQ_DEF}, {   4} },         
    { {     311}, {  78} }, // mulop
    { {     275}, {  79} }, // MUL  
    { {     276}, {  80} }, // DIV  
    { {       0}, { -47} },         
};

SR__ s_55[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -51} }, 
};

SR__ s_56[] =
{
    { { REQ_TOKEN}, { 13} },                       
    { {       304}, { 81} }, // expression         
    { {       305}, { 50} }, // var                
    { {       306}, { 51} }, // simple_expression  
    { {       290}, { 52} }, // id                 
    { {       307}, { 53} }, // additive_expression
    { {       263}, { 11} }, // ID                 
    { {       310}, { 54} }, // term               
    { {       312}, { 55} }, // factor             
    { {       265}, { 56} }, // LEFTP              
    { {       313}, { 57} }, // call               
    { {       291}, { 58} }, // num                
    { {       264}, { 16} }, // NUM                
    { {         0}, {  0} },                       
};

SR__ s_57[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -56} }, 
};

SR__ s_58[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -57} }, 
};

SR__ s_59[] =
{
    { { REQ_TOKEN}, {  3} },             
    { {       272}, { 12} }, // SEMICOLON
    { {       267}, { 13} }, // LEFTS    
    { {         0}, {  0} },             
};

SR__ s_60[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -27} }, 
};

SR__ s_61[] =
{
    { { REQ_TOKEN}, { 13} },                       
    { {       304}, { 82} }, // expression         
    { {       305}, { 50} }, // var                
    { {       306}, { 51} }, // simple_expression  
    { {       290}, { 52} }, // id                 
    { {       307}, { 53} }, // additive_expression
    { {       263}, { 11} }, // ID                 
    { {       310}, { 54} }, // term               
    { {       312}, { 55} }, // factor             
    { {       265}, { 56} }, // LEFTP              
    { {       313}, { 57} }, // call               
    { {       291}, { 58} }, // num                
    { {       264}, { 16} }, // NUM                
    { {         0}, {  0} },                       
};

SR__ s_62[] =
{
    { { REQ_TOKEN}, { 13} },                       
    { {       304}, { 83} }, // expression         
    { {       305}, { 50} }, // var                
    { {       306}, { 51} }, // simple_expression  
    { {       290}, { 52} }, // id                 
    { {       307}, { 53} }, // additive_expression
    { {       263}, { 11} }, // ID                 
    { {       310}, { 54} }, // term               
    { {       312}, { 55} }, // factor             
    { {       265}, { 56} }, // LEFTP              
    { {       313}, { 57} }, // call               
    { {       291}, { 58} }, // num                
    { {       264}, { 16} }, // NUM                
    { {         0}, {  0} },                       
};

SR__ s_63[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -32} }, 
};

SR__ s_64[] =
{
    { { REQ_TOKEN}, {  2} },             
    { {       272}, { 84} }, // SEMICOLON
    { {         0}, {  0} },             
};

SR__ s_65[] =
{
    { { REQ_TOKEN}, { 13} },                       
    { {       304}, { 85} }, // expression         
    { {       305}, { 50} }, // var                
    { {       306}, { 51} }, // simple_expression  
    { {       290}, { 52} }, // id                 
    { {       307}, { 53} }, // additive_expression
    { {       263}, { 11} }, // ID                 
    { {       310}, { 54} }, // term               
    { {       312}, { 55} }, // factor             
    { {       265}, { 56} }, // LEFTP              
    { {       313}, { 57} }, // call               
    { {       291}, { 58} }, // num                
    { {       264}, { 16} }, // NUM                
    { {         0}, {  0} },                       
};

SR__ s_66[] =
{
    { { REQ_TOKEN}, { 13} },                       
    { {       304}, { 86} }, // expression         
    { {       305}, { 50} }, // var                
    { {       306}, { 51} }, // simple_expression  
    { {       290}, { 52} }, // id                 
    { {       307}, { 53} }, // additive_expression
    { {       263}, { 11} }, // ID                 
    { {       310}, { 54} }, // term               
    { {       312}, { 55} }, // factor             
    { {       265}, { 56} }, // LEFTP              
    { {       313}, { 57} }, // call               
    { {       291}, { 58} }, // num                
    { {       264}, { 16} }, // NUM                
    { {         0}, {  0} },                       
};

SR__ s_67[] =
{
    { { REQ_DEF}, {  15} },                       
    { {     314}, {  87} }, // args               
    { {     315}, {  88} }, // arg_list           
    { {     304}, {  89} }, // expression         
    { {     305}, {  50} }, // var                
    { {     306}, {  51} }, // simple_expression  
    { {     290}, {  52} }, // id                 
    { {     307}, {  53} }, // additive_expression
    { {     263}, {  11} }, // ID                 
    { {     310}, {  54} }, // term               
    { {     312}, {  55} }, // factor             
    { {     265}, {  56} }, // LEFTP              
    { {     313}, {  57} }, // call               
    { {     291}, {  58} }, // num                
    { {     264}, {  16} }, // NUM                
    { {       0}, { -60} },                       
};

SR__ s_68[] =
{
    { { REQ_TOKEN}, { 11} },                       
    { {       307}, { 90} }, // additive_expression
    { {       310}, { 54} }, // term               
    { {       312}, { 55} }, // factor             
    { {       265}, { 56} }, // LEFTP              
    { {       305}, { 91} }, // var                
    { {       313}, { 57} }, // call               
    { {       291}, { 58} }, // num                
    { {       290}, { 52} }, // id                 
    { {       264}, { 16} }, // NUM                
    { {       263}, { 11} }, // ID                 
    { {         0}, {  0} },                       
};

SR__ s_69[] =
{
    { { REQ_TOKEN}, { 10} },          
    { {       310}, { 92} }, // term  
    { {       312}, { 55} }, // factor
    { {       265}, { 56} }, // LEFTP 
    { {       305}, { 91} }, // var   
    { {       313}, { 57} }, // call  
    { {       291}, { 58} }, // num   
    { {       290}, { 52} }, // id    
    { {       264}, { 16} }, // NUM   
    { {       263}, { 11} }, // ID    
    { {         0}, {  0} },          
};

SR__ s_70[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -40} }, 
};

SR__ s_71[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -41} }, 
};

SR__ s_72[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -42} }, 
};

SR__ s_73[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -43} }, 
};

SR__ s_74[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -44} }, 
};

SR__ s_75[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -45} }, 
};

SR__ s_76[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -48} }, 
};

SR__ s_77[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -49} }, 
};

SR__ s_78[] =
{
    { { REQ_TOKEN}, {  9} },          
    { {       312}, { 93} }, // factor
    { {       265}, { 56} }, // LEFTP 
    { {       305}, { 91} }, // var   
    { {       313}, { 57} }, // call  
    { {       291}, { 58} }, // num   
    { {       290}, { 52} }, // id    
    { {       264}, { 16} }, // NUM   
    { {       263}, { 11} }, // ID    
    { {         0}, {  0} },          
};

SR__ s_79[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -52} }, 
};

SR__ s_80[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -53} }, 
};

SR__ s_81[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       266}, { 94} }, // RIGHTP
    { {         0}, {  0} },          
};

SR__ s_82[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       266}, { 95} }, // RIGHTP
    { {         0}, {  0} },          
};

SR__ s_83[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       266}, { 96} }, // RIGHTP
    { {         0}, {  0} },          
};

SR__ s_84[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -33} }, 
};

SR__ s_85[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -34} }, 
};

SR__ s_86[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       268}, { 97} }, // RIGHTS
    { {         0}, {  0} },          
};

SR__ s_87[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       266}, { 98} }, // RIGHTP
    { {         0}, {  0} },          
};

SR__ s_88[] =
{
    { { REQ_DEF}, {   2} },         
    { {     271}, {  99} }, // COMMA
    { {       0}, { -59} },         
};

SR__ s_89[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -62} }, 
};

SR__ s_90[] =
{
    { { REQ_DEF}, {   4} },         
    { {     309}, {  69} }, // addop
    { {     273}, {  76} }, // ADD  
    { {     274}, {  77} }, // SUB  
    { {       0}, { -38} },         
};

SR__ s_91[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -55} }, 
};

SR__ s_92[] =
{
    { { REQ_DEF}, {   4} },         
    { {     311}, {  78} }, // mulop
    { {     275}, {  79} }, // MUL  
    { {     276}, {  80} }, // DIV  
    { {       0}, { -46} },         
};

SR__ s_93[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -50} }, 
};

SR__ s_94[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -54} }, 
};

SR__ s_95[] =
{
    { { REQ_TOKEN}, {  24} },                       
    { {       299}, { 100} }, // statement          
    { {       300}, {  40} }, // expression_stmt    
    { {       293}, {  41} }, // compound_stmt      
    { {       301}, {  42} }, // selection_stmt     
    { {       302}, {  43} }, // iteration_stmt     
    { {       303}, {  44} }, // return_stmt        
    { {       304}, {  45} }, // expression         
    { {       272}, {  46} }, // SEMICOLON          
    { {       269}, {  28} }, // LEFTB              
    { {       258}, {  47} }, // IF                 
    { {       262}, {  48} }, // WHILE              
    { {       259}, {  49} }, // RETURN             
    { {       305}, {  50} }, // var                
    { {       306}, {  51} }, // simple_expression  
    { {       290}, {  52} }, // id                 
    { {       307}, {  53} }, // additive_expression
    { {       263}, {  11} }, // ID                 
    { {       310}, {  54} }, // term               
    { {       312}, {  55} }, // factor             
    { {       265}, {  56} }, // LEFTP              
    { {       313}, {  57} }, // call               
    { {       291}, {  58} }, // num                
    { {       264}, {  16} }, // NUM                
    { {         0}, {   0} },                       
};

SR__ s_96[] =
{
    { { REQ_TOKEN}, {  24} },                       
    { {       299}, { 101} }, // statement          
    { {       300}, {  40} }, // expression_stmt    
    { {       293}, {  41} }, // compound_stmt      
    { {       301}, {  42} }, // selection_stmt     
    { {       302}, {  43} }, // iteration_stmt     
    { {       303}, {  44} }, // return_stmt        
    { {       304}, {  45} }, // expression         
    { {       272}, {  46} }, // SEMICOLON          
    { {       269}, {  28} }, // LEFTB              
    { {       258}, {  47} }, // IF                 
    { {       262}, {  48} }, // WHILE              
    { {       259}, {  49} }, // RETURN             
    { {       305}, {  50} }, // var                
    { {       306}, {  51} }, // simple_expression  
    { {       290}, {  52} }, // id                 
    { {       307}, {  53} }, // additive_expression
    { {       263}, {  11} }, // ID                 
    { {       310}, {  54} }, // term               
    { {       312}, {  55} }, // factor             
    { {       265}, {  56} }, // LEFTP              
    { {       313}, {  57} }, // call               
    { {       291}, {  58} }, // num                
    { {       264}, {  16} }, // NUM                
    { {         0}, {   0} },                       
};

SR__ s_97[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -37} }, 
};

SR__ s_98[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -58} }, 
};

SR__ s_99[] =
{
    { { REQ_TOKEN}, {  13} },                       
    { {       304}, { 102} }, // expression         
    { {       305}, {  50} }, // var                
    { {       306}, {  51} }, // simple_expression  
    { {       290}, {  52} }, // id                 
    { {       307}, {  53} }, // additive_expression
    { {       263}, {  11} }, // ID                 
    { {       310}, {  54} }, // term               
    { {       312}, {  55} }, // factor             
    { {       265}, {  56} }, // LEFTP              
    { {       313}, {  57} }, // call               
    { {       291}, {  58} }, // num                
    { {       264}, {  16} }, // NUM                
    { {         0}, {   0} },                       
};

SR__ s_100[] =
{
    { { REQ_DEF}, {   2} },        
    { {     257}, { 103} }, // ELSE
    { {       0}, { -29} },        
};

SR__ s_101[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -31} }, 
};

SR__ s_102[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -61} }, 
};

SR__ s_103[] =
{
    { { REQ_TOKEN}, {  24} },                       
    { {       299}, { 104} }, // statement          
    { {       300}, {  40} }, // expression_stmt    
    { {       293}, {  41} }, // compound_stmt      
    { {       301}, {  42} }, // selection_stmt     
    { {       302}, {  43} }, // iteration_stmt     
    { {       303}, {  44} }, // return_stmt        
    { {       304}, {  45} }, // expression         
    { {       272}, {  46} }, // SEMICOLON          
    { {       269}, {  28} }, // LEFTB              
    { {       258}, {  47} }, // IF                 
    { {       262}, {  48} }, // WHILE              
    { {       259}, {  49} }, // RETURN             
    { {       305}, {  50} }, // var                
    { {       306}, {  51} }, // simple_expression  
    { {       290}, {  52} }, // id                 
    { {       307}, {  53} }, // additive_expression
    { {       263}, {  11} }, // ID                 
    { {       310}, {  54} }, // term               
    { {       312}, {  55} }, // factor             
    { {       265}, {  56} }, // LEFTP              
    { {       313}, {  57} }, // call               
    { {       291}, {  58} }, // num                
    { {       264}, {  16} }, // NUM                
    { {         0}, {   0} },                       
};

SR__ s_104[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -30} }, 
};


// State array:
SR__ *s_state[] =
{
  s_0,  s_1,  s_2,  s_3,  s_4,  s_5,  s_6,  s_7,  s_8,  s_9,
  s_10,  s_11,  s_12,  s_13,  s_14,  s_15,  s_16,  s_17,  s_18,  s_19,
  s_20,  s_21,  s_22,  s_23,  s_24,  s_25,  s_26,  s_27,  s_28,  s_29,
  s_30,  s_31,  s_32,  s_33,  s_34,  s_35,  s_36,  s_37,  s_38,  s_39,
  s_40,  s_41,  s_42,  s_43,  s_44,  s_45,  s_46,  s_47,  s_48,  s_49,
  s_50,  s_51,  s_52,  s_53,  s_54,  s_55,  s_56,  s_57,  s_58,  s_59,
  s_60,  s_61,  s_62,  s_63,  s_64,  s_65,  s_66,  s_67,  s_68,  s_69,
  s_70,  s_71,  s_72,  s_73,  s_74,  s_75,  s_76,  s_77,  s_78,  s_79,
  s_80,  s_81,  s_82,  s_83,  s_84,  s_85,  s_86,  s_87,  s_88,  s_89,
  s_90,  s_91,  s_92,  s_93,  s_94,  s_95,  s_96,  s_97,  s_98,  s_99,
  s_100,  s_101,  s_102,  s_103,  s_104,
};

} // anonymous namespace ends




// If the parsing function call (i.e., parse()' needs arguments, then provide
// an overloaded function.  The code below doesn't rely on parameters, so no
// arguments are required.  Furthermore, parse uses a function try block to
// allow us to do ACCEPT and ABORT from anywhere, even from within members
// called by actions, simply throwing the appropriate exceptions.


// base/base1
ParserBase::ParserBase()
:
    d_token(Reserved__::UNDETERMINED__),
    // $insert baseclasscode
    d_requiredTokens__(0)
{
}

// base/clearin
void ParserBase::clearin__()
{
    d_nErrors__ = 0;
    d_stackIdx = -1;
    d_stateStack.clear();
    d_token = Reserved__::UNDETERMINED__;
    d_next = TokenPair{ Reserved__::UNDETERMINED__, STYPE__{} };
    d_recovery = false;
    d_acceptedTokens__ = d_requiredTokens__;
    d_val__ = STYPE__{};

    push__(0);
}

// base/debugfunctions

void ParserBase::setDebug(bool mode)
{
    d_actionCases__ = false;
    d_debug__ = mode;
}

void ParserBase::setDebug(DebugMode__ mode)
{
    d_actionCases__ = mode & ACTIONCASES;
    d_debug__ =       mode & ON;
}

// base/lex
void ParserBase::lex__(int token)
{
    d_token = token;

    if (d_token <= 0)
        d_token = Reserved__::EOF__;

    d_terminalToken = true;
}

// base/lookup
int ParserBase::lookup__() const
{
    // if the final transition is negative, then we should reduce by the rule
    // given by its positive value.

    SR__ const *sr = s_state[d_state];
    SR__ const *last = sr + sr->d_lastIdx;

    for ( ; ++sr != last; )           // visit all but the last SR entries
    {
        if (sr->d_token == d_token)
            return sr->d_action;
    }

    if (sr == last)   // reached the last element
    {
        if (sr->d_action < 0)   // default reduction
        {
            return sr->d_action;                
        }

        // No default reduction, so token not found, so error.
        throw UNEXPECTED_TOKEN__;
    }

    // not at the last element: inspect the nature of the action
    // (< 0: reduce, 0: ACCEPT, > 0: shift)

    int action = sr->d_action;


    return action;
}

// base/pop
void ParserBase::pop__(size_t count)
{
    if (d_stackIdx < static_cast<int>(count))
    {
        ABORT();
    }

    d_stackIdx -= count;
    d_state = d_stateStack[d_stackIdx].first;
    d_vsp = &d_stateStack[d_stackIdx];

}

// base/poptoken
void ParserBase::popToken__()
{
    d_token = d_next.first;
    d_val__ = std::move(d_next.second);

    d_next.first = Reserved__::UNDETERMINED__;
}

// base/push
void ParserBase::push__(size_t state)
{
    size_t currentSize = d_stateStack.size();
    if (stackSize__() == currentSize)
    {
        size_t newSize = currentSize + STACK_EXPANSION__;
        d_stateStack.resize(newSize);
    }

    ++d_stackIdx;
    d_stateStack[d_stackIdx] = 
                    StatePair{ d_state = state, std::move(d_val__) };

    d_vsp = &d_stateStack[d_stackIdx];

    if (d_stackIdx == 0)
    {
    }
    else
    {
    }
}

// base/pushtoken
void ParserBase::pushToken__(int token)
{
    d_next = TokenPair{ d_token, std::move(d_val__) };
    d_token = token;
}

// base/redotoken
void ParserBase::redoToken__()
{
    if (d_token != Reserved__::UNDETERMINED__)
        pushToken__(d_token);
}

// base/reduce
void ParserBase::reduce__(int rule)
{
    PI__ const &pi = s_productionInfo[rule];

    d_token = pi.d_nonTerm;
    pop__(pi.d_size);

    d_terminalToken = false;
}

// base/shift
void ParserBase::shift__(int action)
{
    push__(action);
    popToken__();               // token processed

    if (d_recovery and d_terminalToken)
    {
        d_recovery = false;
        d_acceptedTokens__ = 0;
    }
}

// base/startrecovery
void ParserBase::startRecovery__()
{
    int lastToken = d_token;                // give the unexpected token a
                                            // chance to be processed
                                            // again.

    pushToken__(Reserved__::errTok__);      // specify errTok__ as next token
    push__(lookup__());                     // push the error state

    d_token = lastToken;                    // reactivate the unexpected
                                            // token (we're now in an
                                            // ERROR state).

    d_recovery = true;
}

// base/top
inline size_t ParserBase::top__() const
{
    return d_stateStack[d_stackIdx].first;
}

// derived/errorrecovery
void Parser::errorRecovery__()
{
    // When an error has occurred, pop elements off the stack until the top
    // state has an error-item. If none is found, the default recovery
    // mode (which is to abort) is activated. 
    //
    // If EOF is encountered without being appropriate for the current state,
    // then the error recovery will fall back to the default recovery mode.
    // (i.e., parsing terminates)



    if (d_acceptedTokens__ >= d_requiredTokens__)// only generate an error-
    {                                           // message if enough tokens 
        ++d_nErrors__;                          // were accepted. Otherwise
        error();                                // simply skip input
    }

    // get the error state
    while (not (s_state[top__()][0].d_type & ERR_ITEM))
    {
        pop__();
    }

    // In the error state, looking up a token allows us to proceed.
    // Continuation may be require multiple reductions, but eventually a
    // terminal-token shift is used. See nextCycle__ for details.

    startRecovery__();
}

// derived/executeaction
void Parser::executeAction__(int production)
try
{
    if (token__() != Reserved__::UNDETERMINED__)
        pushToken__(token__());     // save an already available token
    switch (production)
    {
        // $insert actioncases
        
        case 1:
        {
         d_val__ = TreeUtil::buildTree("程序声明列表", {vs__(0)});
         TreeUtil::printTree(d_val__);
         TreeUtil::destroyTree(d_val__);
         }
        break;

        case 2:
        {
         d_val__ = TreeUtil::mergeTree(vs__(-1), vs__(0));
         
         }
        break;

        case 3:
        {
         d_val__ = vs__(0);
         }
        break;

        case 4:
        {
         d_val__ = vs__(0);
         }
        break;

        case 5:
        {
         d_val__ = vs__(0);
         }
        break;

        case 6:
        {
         d_val__ = TreeUtil::buildTree("变量声明", {vs__(-2), vs__(-1)});
         }
        break;

        case 7:
        {
         vs__(-5)->content += "[]";
         vs__(-5)->left = vs__(-2);
         d_val__ = TreeUtil::buildTree("变量声明", {vs__(-5),vs__(-4)});
         }
        break;

        case 8:
        { 
         d_val__ = TreeUtil::buildTree("int");
         }
        break;

        case 9:
        { 
         d_val__ = TreeUtil::buildTree("void");
         }
        break;

        case 10:
        {
         d_val__ = TreeUtil::buildTree("函数声明", {vs__(-5), vs__(-4), vs__(-2), vs__(0)});
         }
        break;

        case 11:
        {
         d_val__ = TreeUtil::buildTree("参数列表",{vs__(0)});
         }
        break;

        case 12:
        {
         d_val__ = TreeUtil::buildTree("void");
         }
        break;

        case 13:
        {
         d_val__ = TreeUtil::mergeTree(vs__(-2), vs__(0));
         }
        break;

        case 14:
        {
         d_val__ = vs__(0);
         }
        break;

        case 15:
        {
         d_val__ = TreeUtil::buildTree("变量声明", {vs__(-1), vs__(0)});
         }
        break;

        case 16:
        {
         vs__(-3)->content += "[]";
         d_val__ = TreeUtil::buildTree("变量声明", {vs__(-3), vs__(-2)});
         }
        break;

        case 17:
        {
         TreeNode* tmp = TreeUtil::buildTree("局部变量声明", {vs__(-2)});
         TreeNode* tmp2 = TreeUtil::buildTree("语句列表", {vs__(-1)});
         d_val__ = TreeUtil::buildTree("复合语句列表", {tmp, tmp2});
         }
        break;

        case 18:
        {
         d_val__ = TreeUtil::mergeTree(vs__(-1), vs__(0));
         }
        break;

        case 19:
        {
         d_val__ = nullptr;
         }
        break;

        case 20:
        {
         d_val__ = TreeUtil::mergeTree(vs__(-1), vs__(0));
         }
        break;

        case 21:
        {
         d_val__ = nullptr;
         }
        break;

        case 22:
        {
         d_val__ = vs__(0);
         }
        break;

        case 23:
        {
         d_val__ = vs__(0);
         }
        break;

        case 24:
        {
         d_val__ = vs__(0);
         }
        break;

        case 25:
        {
         d_val__ = vs__(0);
         }
        break;

        case 26:
        {
         d_val__ = vs__(0);
         }
        break;

        case 27:
        {
         d_val__ = vs__(-1);
         }
        break;

        case 28:
        {
         d_val__ = nullptr;
         }
        break;

        case 29:
        {
         TreeNode* tmp = TreeUtil::buildTree("条件成立时执行的语句", {vs__(0)});
         d_val__ = TreeUtil::buildTree("if", {vs__(-2), tmp});
         }
        break;

        case 30:
        {
         TreeNode* tmp = TreeUtil::buildTree("条件成立时执行的语句", {vs__(-2)});
         TreeNode* tmp2 = TreeUtil::buildTree("条件不成立时执行的语句", {vs__(0)});
         d_val__ = TreeUtil::buildTree("if", {vs__(-4), tmp, tmp2});
         }
        break;

        case 31:
        {
         TreeNode* tmp = TreeUtil::buildTree("条件成立时执行的语句", {vs__(0)});
         d_val__ = TreeUtil::buildTree("while", {vs__(-2), tmp});
         }
        break;

        case 32:
        {
         d_val__ = TreeUtil::buildTree("return");
         }
        break;

        case 33:
        {
         d_val__ = TreeUtil::buildTree("return", {vs__(-1)});
         }
        break;

        case 34:
        {
         d_val__ = TreeUtil::buildTree("=", {vs__(-2), vs__(0)});
         }
        break;

        case 35:
        {
         d_val__ = vs__(0);
         }
        break;

        case 36:
        {
         d_val__ = vs__(0);
         }
        break;

        case 37:
        {
         d_val__ = TreeUtil::buildTree("[]", {vs__(-3), vs__(-1)});
         }
        break;

        case 38:
        {
         d_val__ = TreeUtil::buildTree(vs__(-1), {vs__(-2), vs__(0)});
         }
        break;

        case 39:
        {
         d_val__ = vs__(0);
         }
        break;

        case 40:
        { 
         d_val__ = TreeUtil::buildTree("<=");
         }
        break;

        case 41:
        { 
         d_val__ = TreeUtil::buildTree("<");
         }
        break;

        case 42:
        {
         d_val__ = TreeUtil::buildTree(">");
         }
        break;

        case 43:
        {
         d_val__ = TreeUtil::buildTree(">=");
         }
        break;

        case 44:
        {
         d_val__ = TreeUtil::buildTree("==");
         }
        break;

        case 45:
        {
         d_val__ = TreeUtil::buildTree("!=");
         }
        break;

        case 46:
        {
         d_val__ = TreeUtil::buildTree(vs__(-1), {vs__(-2), vs__(0)});
         }
        break;

        case 47:
        {
         d_val__ = vs__(0);
         }
        break;

        case 48:
        { 
         d_val__ = TreeUtil::buildTree("+");
         }
        break;

        case 49:
        { 
         d_val__ = TreeUtil::buildTree("-");
         }
        break;

        case 50:
        {
         d_val__ = TreeUtil::buildTree(vs__(-1), {vs__(-2),vs__(0)});
         }
        break;

        case 51:
        {
         d_val__ = vs__(0);
         }
        break;

        case 52:
        {
         d_val__ = TreeUtil::buildTree("*");
         }
        break;

        case 53:
        {
         d_val__ = TreeUtil::buildTree("/");
         }
        break;

        case 54:
        {
         d_val__ = vs__(-1);
         }
        break;

        case 55:
        {
         d_val__ = vs__(0);
         }
        break;

        case 56:
        {
         d_val__ = vs__(0);
         }
        break;

        case 57:
        { 
         d_val__ = vs__(0);
         }
        break;

        case 58:
        {
         d_val__ = TreeUtil::buildTree("call", {vs__(-3), vs__(-1)});
         }
        break;

        case 59:
        {
         d_val__ = TreeUtil::buildTree("参数列表", {vs__(0)});
         }
        break;

        case 61:
        {
         d_val__ = TreeUtil::mergeTree(vs__(-2), vs__(-1));
         }
        break;

        case 62:
        {
         d_val__ = vs__(0);
         }
        break;

        case 63:
        {
         d_val__ = TreeUtil::buildTree(d_scanner.matched());
         }
        break;

        case 64:
        {
         d_val__ = TreeUtil::buildTree(d_scanner.matched());
         }
        break;

    }
}
catch (std::exception const &exc)
{
    exceptionHandler(exc);
}

// derived/nextcycle
void Parser::nextCycle__()
try
{
    if (s_state[state__()]->d_type & REQ_TOKEN)
        nextToken__();              // obtain next token


    int action = lookup__();        // lookup d_token in d_state

    if (action > 0)                 // SHIFT: push a new state
    {
        shift__(action);
        return;
    }

    if (action < 0)            // REDUCE: execute and pop.
    {

        if (recovery__())
            redoToken__();
        else
            executeAction__(-action);
                                            // next token is the rule's LHS
        reduce__(-action); 
        return;
    }

    if (recovery__())
        ABORT();
    else 
        ACCEPT();
}
catch (ErrorRecovery__)
{
    if (not recovery__())
        errorRecovery__();
    else
    {
        if (token__() == Reserved__::EOF__)
            ABORT();
        popToken__();               // skip the failing token
    }
}


// derived/nexttoken
void Parser::nextToken__()
{ 
    // If d_token is Reserved__::UNDETERMINED__ then if savedToken__() is
    // Reserved__::UNDETERMINED__ another token is obtained from lex(). Then
    // savedToken__() is assigned to d_token.

                                    // no need for a token: got one already
    if (token__() != Reserved__::UNDETERMINED__) 
    {
        return;                             
    }

    if (savedToken__() != Reserved__::UNDETERMINED__)
    {
        popToken__();               // consume pending token
    }
    else
    {
        ++d_acceptedTokens__;       // accept another token (see
                                    // errorRecover())
        lex__(lex());
        print__();
    }
    print();
}

// derived/print
void Parser::print__()
{
// $insert print
}

// derived/parse
int Parser::parse()
try 
{
    // The parsing algorithm:
    // Initially, state 0 is pushed on the stack, and all relevant variables
    // are initialized by Base::clearin__.
    //
    // Then, in an eternal loop:
    //
    //  1. If a state is a REQ_TOKEN type, then the next token is obtained
    //     from nextToken().  This may very well be the currently available
    //     token. When retrieving a terminal token d_terminal is set to true.
    //
    //  2. lookup() is called, d_token is looked up in the current state's
    //     SR_ array.
    //
    //  4. Depending on the result of the lookup() function the next state is
    //     shifted on the parser's stack, a reduction by some rule is applied,
    //     or the parsing function returns ACCEPT(). When a reduction is
    //     called for, any action that may have been defined for that
    //     reduction is executed.
    //
    //  5. An error occurs if d_token is not found, and the state has no
    //     default reduction.

    clearin__();                            // initialize, push(0)

    while (true)
    {
// $insert prompt
        nextCycle__();
    }
}
catch (Return__ retValue)
{
    return retValue or d_nErrors__;
}


// derived/tail


